import java.nio.file.Files
import java.nio.file.Paths

buildscript {
    dependencies {
        classpath "org.junit.platform:junit-platform-gradle-plugin:1.0.0"
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.20"
    id "org.jetbrains.kotlin.kapt" version "1.3.20"
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.20"
    id "io.codearte.nexus-staging" version "0.12.0"
    id "com.github.johnrengelman.shadow" version "4.0.3"
    id "de.marcphilipp.nexus-publish" version "0.2.0" apply false
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jcenter.bintray.com" }
}

subprojects {
    sourceCompatibility = 11
    targetCompatibility = 11

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
    }

    apply from: "../base-kotlin.gradle"

    compileJava {
        options.compilerArgs += ["--release", "11"]
    }

}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

nexusStaging {
    username = sonatypeUsername ?: System.getenv('SONATYPE_USERNAME')
    password = sonatypePassword ?: System.getenv('SONATYPE_PASSWORD')
}

def getGitCommitId() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

ext.writeVersionFile = { String module, String versionPrefix ->
    def versionFile = Paths.get(sourceSets.main.output.resourcesDir.getPath(), "$module-VERSION.txt")
    def parentDir = versionFile.getParent()
    if (!Files.exists(parentDir)) {
        Files.createDirectories(parentDir)
    }
    Files.writeString(versionFile, "$versionPrefix: ${project.version.toString()} #${getGitCommitId()}")
}
