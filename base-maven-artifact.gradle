apply plugin: 'java'
apply plugin: 'signing'
apply plugin: "de.marcphilipp.nexus-publish"

ext {
    maven2_url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
    snapshot_url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    project_name = project.name
    project_description = project.description
    project_url = 'https://github.com/sandstorm/config-doc-gen'
    project_license_url = 'https://github.com/sandstorm/config-doc-gen/blob/master/LICENSE'
    project_license_slug = "MIT"
    project_developer = 'eric.kloss'
    project_scm = 'scm:git:https://github.com/sandstorm/config-doc-gen.git'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = project_name
                packaging = 'jar'
                description = project_description
                url = project_url
                scm {
                    connection = project_scm
                    developerConnection = project_scm
                    url = project_url
                }
                licenses {
                    license {
                        name = project_license_slug
                        url = project_license_url
                    }
                }
                developers {
                    developer {
                        id = project_developer
                        name = project_developer
                    }
                }
            }
        }
    }
    /*
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            url = version.endsWith('SNAPSHOT') ? snapshot_url : maven2_url
            credentials {
                username = System.getenv('SONATYPE_USERNAME')
                password = System.getenv('SONATYPE_PASSWORD')
            }
        }
    }
    */
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects { if (!ext."signing.keyId") { ext."signing.keyId" = System.getenv('GPG_KEY_ID') } }
        allprojects { if (!ext."signing.secretKeyRingFile") { ext."signing.secretKeyRingFile" = System.getenv('GPG_KEY_LOCATION') } }
        allprojects { if (!ext."signing.password") { ext."signing.password" = System.getenv('GPG_PASSPHRASE') } }
    }
    // Do not sign archives by default (a local build without gpg keyring should succeed)
    if (taskGraph.allTasks.any { it.name == 'build' || it.name == 'assemble' || it.name == 'publishToMavenLocal' }) {
        tasks.findAll { it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar' || it.name == 'signMavenJavaPublication' }.each { task ->
            task.enabled = false
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

nexusPublishing {
    packageGroup = rootProject.nexusStaging.packageGroup
    stagingProfileId = rootProject.nexusStaging.stagingProfileId
    username = rootProject.nexusStaging.username
    password = rootProject.nexusStaging.password

    serverUrl = uri(version.endsWith('SNAPSHOT') ? snapshot_url : maven2_url)
}
